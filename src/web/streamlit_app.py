import pandas as pd
import streamlit as st
import requests
import json

import warnings
warnings.filterwarnings('ignore')

def convert_df(df):
    return df.to_csv(index=False).encode('utf-8')

def main():
    #st.header("ikanam-ai‚úîÔ∏è", divider='rainbow')
    api_url = "https://aae5-83-143-66-61.ngrok-free.app/generate"

    st.title("–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã –∫ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º—É –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –†–µ—Å—É—Ä—Å–æ–≤")
    txt = st.text_area(
        "‚öôÔ∏è –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        "–ú–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, "
        "–∏—Å–ø–æ–ª—å–∑—É—è NLP –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º,"
        "–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Ç–æ—á–Ω–æ—Å—Ç–∏."
        )

    tab1, tab2 = st.tabs(["–û–¥–Ω–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µüòéüìä", "CSV-—Ñ–∞–π–ªüöÄüíª"])
    

    with tab1:
        vacancy_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ :")

        if st.button("–ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∏–¥—É",key="single_button"):
            example = vacancy_url
            payload = {'req':example}

            st.markdown(f'<a href="{"https://raw.githubusercontent.com/Y1OV/dl_homework_dashboard/main/logo-2.jpg"}"><img src="{"https://raw.githubusercontent.com/Y1OV/dl_homework_dashboard/main/logo-2.jpg"}" alt="Foo" width="500" height="250"/></a>', unsafe_allow_html=True)


            #st.markdown(f"<span style='color:red'>{'**–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç** '}{payload['req']}</span>", unsafe_allow_html=True)


            response = requests.post(api_url, json=payload)
            #st.text(response)
            data = json.loads(response.text)

            
            #st.text(data)

            col1, col2 = st.columns(2)
            with col1:
                st.header("**–í—Ö–æ–¥–Ω–æ–µ –ö–°–†**")
                st.markdown(f"<span style='color:red'>{payload['req']}</span>", unsafe_allow_html=True)

            with col2:
                st.header("**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**")
                st.markdown(
                        f"<span style='color:green'>{'–ö–æ–¥ –ö–°–†: '+str(data['predict'][0])}</span>",
                        unsafe_allow_html=True
                    )
                st.markdown(
                        f"<span style='color:green'>{'–ù–∞–∑–≤–∞–Ω–∏–µ –ö–°–†: '+str(data['predict'][1])}</span>",
                        unsafe_allow_html=True
                    )
                st.markdown(
                        f"<span style='color:#FFA500'>{'–°—Ç–µ–ø–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: '+str(round(data['predict'][3], 2))}</span>",
                        unsafe_allow_html=True
                    )


            # st.markdown(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**")
            # st.markdown(
            #     f"<span style='color:green'>{'–ö–æ–¥ –ö–°–†: '+str(data['predict'][0])}</span>",
            #     unsafe_allow_html=True
            # )
            # st.markdown(
            #     f"<span style='color:green'>{'–ù–∞–∑–≤–∞–Ω–∏–µ –ö–°–†: '+str(data['predict'][1])}</span>",
            #     unsafe_allow_html=True
            # )
            # st.markdown(
            #     f"<span style='color:#FFA500'>{'–°—Ç–µ–ø–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: '+str(round(data['predict'][3], 2))}</span>",
            #     unsafe_allow_html=True
            # )
    with tab2:
        st.title('CSV File Uploader')

        # –ó–∞–≥—Ä—É–∂–∞–µ–º CSV —Ñ–∞–π–ª
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–µ—Ç–µ CSV —Ñ–∞–π–ª", type="csv")

        if uploaded_file is not None:
            # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
            df = pd.read_csv(uploaded_file)
            #st.write(df)

        if st.button("–ü—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –≤–∏–¥—É",key="csv_button"):

            st.markdown(f'<a href="{"https://raw.githubusercontent.com/Y1OV/dl_homework_dashboard/main/logo-2.jpg"}"><img src="{"https://raw.githubusercontent.com/Y1OV/dl_homework_dashboard/main/logo-2.jpg"}" alt="Foo" width="500" height="250"/></a>', unsafe_allow_html=True)

            data_for_csv = pd.DataFrame(columns=['name', '–ö–æ–¥ –ö–°–†', '–ù–∞–∑–≤–∞–Ω–∏–µ –ö–°–†', '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞'])

            for i in df['name']:

                example = i
                payload = {'req':example}


                #st.markdown(f"<span style='color:red'>{'**–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç** '}{payload['req']}</span>", unsafe_allow_html=True)


                response = requests.post(api_url, json=payload)
                data = json.loads(response.text)

                new_row = {'name': i, '–ö–æ–¥ –ö–°–†': data['predict'][0],
                 '–ù–∞–∑–≤–∞–Ω–∏–µ –ö–°–†': data['predict'][1], '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ—Å—á—ë—Ç–∞': data['predict'][4]}

                new_row_df = pd.DataFrame([new_row])
                data_for_csv = pd.concat([data_for_csv, new_row_df], ignore_index=True)




                col1, col2 = st.columns(2)
                with col1:
                    st.header("**–í—Ö–æ–¥–Ω–æ–µ –ö–°–†**")
                    st.markdown(f"<span style='color:red'>{payload['req']}</span>", unsafe_allow_html=True)

                with col2:
                    st.header("**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**")
                    st.markdown(
                    f"<span style='color:green'>{'–ö–æ–¥ –ö–°–†: '+str(data['predict'][0])}</span>",
                    unsafe_allow_html=True
                )
                    st.markdown(
                    f"<span style='color:green'>{'–ù–∞–∑–≤–∞–Ω–∏–µ –ö–°–†: '+str(data['predict'][1])}</span>",
                    unsafe_allow_html=True
                )
                    st.markdown(
                    f"<span style='color:#FFA500'>{'–°—Ç–µ–ø–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: '+str(round(data['predict'][3], 2))}</span>",
                    unsafe_allow_html=True
                )



                # st.markdown(f"**–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç**")
                # #st.markdown(
                # #    f"<span style='color:green'>{data}</span>",
                # #    unsafe_allow_html=True
                # #)
                # st.markdown(
                #     f"<span style='color:green'>{'–ö–æ–¥ –ö–°–†: '+str(data['predict'][0])}</span>",
                #     unsafe_allow_html=True
                # )
                # st.markdown(
                #     f"<span style='color:green'>{'–ù–∞–∑–≤–∞–Ω–∏–µ –ö–°–†: '+str(data['predict'][1])}</span>",
                #     unsafe_allow_html=True
                # )
                # st.markdown(
                #     f"<span style='color:#FFA500'>{'–°—Ç–µ–ø–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: '+str(data['predict'][3])}</span>",
                #     unsafe_allow_html=True
                # )
                st.write("---")
            # data_for_csv
            #data_for_csv['len'] = df['len']
            #data_for_csv['hash'] = df['hash']

            csv = convert_df(data_for_csv)
            st.title('CSV —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏')
            st.write('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª.')
            st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å CSV",
                        data=csv,
                        file_name='true.csv',
                        mime='text/csv',
                                )

if __name__ == "__main__":
    main()
